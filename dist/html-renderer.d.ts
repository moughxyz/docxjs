import { WordDocument } from './word-document';
import { WmlTable, IDomNumbering, WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell, WmlText, WmlSymbol, WmlBreak, WmlNoteReference, WmlSmartTag } from './document/dom';
import { CommonProperties } from './document/common';
import { Options } from './docx-preview';
import { DocumentElement } from './document/document';
import { WmlParagraph } from './document/paragraph';
import { FontTablePart } from './font-table/font-table';
import { FooterHeaderReference, SectionProperties } from './document/section';
import { WmlRun, RunProperties } from './document/run';
import { WmlBookmarkStart } from './document/bookmarks';
import { IDomStyle } from './document/style';
import { WmlBaseNote, WmlFootnote } from './notes/elements';
import { ThemePart } from './theme/theme-part';
import { Part } from './common/part';
import { VmlElement } from './vml/vml';
import { WmlComment, WmlCommentRangeStart, WmlCommentReference } from './comments/elements';
interface CellPos {
    col: number;
    row: number;
}
interface Section {
    sectProps: SectionProperties;
    elements: OpenXmlElement[];
    pageBreak: boolean;
}
type CellVerticalMergeType = Record<number, HTMLTableCellElement>;
export declare class HtmlRenderer {
    htmlDocument: Document;
    className: string;
    rootSelector: string;
    document: WordDocument;
    options: Options;
    styleMap: Record<string, IDomStyle>;
    currentPart: Part;
    tableVerticalMerges: CellVerticalMergeType[];
    currentVerticalMerge: CellVerticalMergeType;
    tableCellPositions: CellPos[];
    currentCellPosition: CellPos;
    footnoteMap: Record<string, WmlFootnote>;
    endnoteMap: Record<string, WmlFootnote>;
    currentFootnoteIds: string[];
    currentEndnoteIds: string[];
    usedHederFooterParts: any[];
    defaultTabSize: string;
    currentTabs: any[];
    commentHighlight: any;
    commentMap: Record<string, Range>;
    tasks: Promise<any>[];
    postRenderTasks: any[];
    constructor(htmlDocument: Document);
    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement, options: Options): Promise<void>;
    renderTheme(themePart: ThemePart, styleContainer: HTMLElement): void;
    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement): void;
    processStyleName(className: string): string;
    processStyles(styles: IDomStyle[]): Record<any, IDomStyle>;
    prodessNumberings(numberings: IDomNumbering[]): void;
    processElement(element: OpenXmlElement): void;
    processTable(table: WmlTable): void;
    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs?: string[]): Record<string, string>;
    createPageElement(className: string, props: SectionProperties): HTMLElement;
    createSectionContent(props: SectionProperties): HTMLElement;
    renderSections(document: DocumentElement): HTMLElement[];
    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, firstOfSection: boolean, into: HTMLElement): void;
    isPageBreakElement(elem: OpenXmlElement): boolean;
    isPageBreakSection(prev: SectionProperties, next: SectionProperties): boolean;
    splitBySection(elements: OpenXmlElement[], defaultProps: SectionProperties): Section[];
    groupByPageBreaks(sections: Section[]): Section[][];
    renderWrapper(children: HTMLElement[]): HTMLDivElement;
    renderDefaultStyle(): HTMLStyleElement;
    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement): HTMLStyleElement;
    renderStyles(styles: IDomStyle[]): HTMLElement;
    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement): void;
    renderElement(elem: OpenXmlElement): Node | Node[];
    renderChildren(elem: OpenXmlElement, into?: Node): Node[];
    renderElements(elems: OpenXmlElement[], into?: Node): Node[];
    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap, props?: Record<string, any>): HTMLElement | HTMLDivElement | HTMLParagraphElement | HTMLObjectElement | HTMLTableElement | HTMLAnchorElement | HTMLAreaElement | HTMLAudioElement | HTMLBaseElement | HTMLQuoteElement | HTMLBodyElement | HTMLBRElement | HTMLButtonElement | HTMLCanvasElement | HTMLTableCaptionElement | HTMLTableColElement | HTMLDataElement | HTMLDataListElement | HTMLModElement | HTMLDetailsElement | HTMLDialogElement | HTMLDListElement | HTMLEmbedElement | HTMLFieldSetElement | HTMLFormElement | HTMLHeadingElement | HTMLHeadElement | HTMLHRElement | HTMLHtmlElement | HTMLIFrameElement | HTMLImageElement | HTMLInputElement | HTMLLabelElement | HTMLLegendElement | HTMLLIElement | HTMLLinkElement | HTMLMapElement | HTMLMenuElement | HTMLMetaElement | HTMLMeterElement | HTMLOListElement | HTMLOptGroupElement | HTMLOptionElement | HTMLOutputElement | HTMLPictureElement | HTMLPreElement | HTMLProgressElement | HTMLScriptElement | HTMLSelectElement | HTMLSlotElement | HTMLSourceElement | HTMLSpanElement | HTMLStyleElement | HTMLTableSectionElement | HTMLTableCellElement | HTMLTemplateElement | HTMLTextAreaElement | HTMLTimeElement | HTMLTitleElement | HTMLTableRowElement | HTMLTrackElement | HTMLUListElement | HTMLVideoElement;
    renderContainerNS(elem: OpenXmlElement, ns: string, tagName: string, props?: Record<string, any>): any;
    renderParagraph(elem: WmlParagraph): HTMLParagraphElement;
    renderRunProperties(style: any, props: RunProperties): void;
    renderCommonProperties(style: any, props: CommonProperties): void;
    renderHyperlink(elem: WmlHyperlink): HTMLAnchorElement;
    renderSmartTag(elem: WmlSmartTag): HTMLSpanElement;
    renderCommentRangeStart(commentStart: WmlCommentRangeStart): Comment;
    renderCommentRangeEnd(commentEnd: WmlCommentRangeStart): Comment;
    renderCommentReference(commentRef: WmlCommentReference): DocumentFragment;
    renderCommentContent(comment: WmlComment, container: Node): void;
    renderDrawing(elem: OpenXmlElement): HTMLDivElement;
    renderImage(elem: IDomImage): HTMLImageElement;
    renderText(elem: WmlText): Text;
    renderDeletedText(elem: WmlText): Text;
    renderBreak(elem: WmlBreak): HTMLBRElement;
    renderInserted(elem: OpenXmlElement): Node | Node[];
    renderDeleted(elem: OpenXmlElement): Node;
    renderSymbol(elem: WmlSymbol): HTMLSpanElement;
    renderFootnoteReference(elem: WmlNoteReference): HTMLElement;
    renderEndnoteReference(elem: WmlNoteReference): HTMLElement;
    renderTab(elem: OpenXmlElement): HTMLSpanElement;
    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement;
    renderRun(elem: WmlRun): HTMLSpanElement;
    renderTable(elem: WmlTable): HTMLTableElement;
    renderTableColumns(columns: WmlTableColumn[]): HTMLTableColElement;
    renderTableRow(elem: OpenXmlElement): HTMLTableRowElement;
    renderTableCell(elem: WmlTableCell): HTMLTableCellElement;
    renderVmlPicture(elem: OpenXmlElement): HTMLDivElement;
    renderVmlElement(elem: VmlElement): SVGElement;
    renderVmlChildElement(elem: VmlElement): any;
    renderMmlRadical(elem: OpenXmlElement): HTMLElement;
    renderMmlDelimiter(elem: OpenXmlElement): HTMLElement;
    renderMmlNary(elem: OpenXmlElement): HTMLElement;
    renderMmlPreSubSuper(elem: OpenXmlElement): any;
    renderMmlGroupChar(elem: OpenXmlElement): any;
    renderMmlBar(elem: OpenXmlElement): any;
    renderMmlRun(elem: OpenXmlElement): any;
    renderMllList(elem: OpenXmlElement): any;
    renderStyleValues(style: Record<string, string>, ouput: HTMLElement): void;
    renderClass(input: OpenXmlElement, ouput: HTMLElement): void;
    findStyle(styleName: string): IDomStyle;
    numberingClass(id: string, lvl: number): string;
    tabStopClass(): string;
    styleToString(selectors: string, values: Record<string, string>, cssText?: string): string;
    numberingCounter(id: string, lvl: number): string;
    levelTextToContent(text: string, suff: string, id: string, numformat: string): string;
    numFormatToCssValue(format: string): any;
    refreshTabStops(): void;
    createElement: typeof createElement;
    later(func: Function): void;
}
type ChildType = Node | string;
declare function createElement<T extends keyof HTMLElementTagNameMap>(tagName: T, props?: Partial<Record<keyof HTMLElementTagNameMap[T], any>>, children?: ChildType[]): HTMLElementTagNameMap[T];
export {};
